From 192617c768a056c747bcf6bee24515579ec603be Mon Sep 17 00:00:00 2001
From: Cody Xie <xkd@rock-chips.com>
Date: Sat, 7 Jan 2017 11:09:07 +0800
Subject: [PATCH 8/9] util-linux:mkfs_vfat: Add 4M align format for rv1108's
 special usage.

Signed-off-by: huaping.liao <huaping.liao@rock-chips.com>
Signed-off-by: Cody Xie <xkd@rock-chips.com>
---
 util-linux/mkfs_vfat.c | 57 ++++++++++++++++++++++++++++++++++++++++++++------
 1 file changed, 51 insertions(+), 6 deletions(-)

diff --git a/util-linux/mkfs_vfat.c b/util-linux/mkfs_vfat.c
index d53c751..2eeb883 100644
--- a/util-linux/mkfs_vfat.c
+++ b/util-linux/mkfs_vfat.c
@@ -75,7 +75,7 @@ enum {
 // TODO: make these cmdline options
 // dont forget sanity check: backup_boot_sector + 3 <= reserved_sect
 	backup_boot_sector = 3,
-	reserved_sect      = 6,
+	//reserved_sect      = 6,
 };
 
 // how many blocks we try to read while testing
@@ -210,6 +210,45 @@ do { \
  *        [-R reserved-sectors]
  *        /dev/name [blocks]
  */
+
+#define OFFSET_SIZE 0x2000  //8192 sector_num
+
+int mfks_vfat_get_sectors(int sector)
+{
+	int m_offset = OFFSET_SIZE;
+
+	while(1) {
+		if (sector <= m_offset) {
+			break;
+		}
+		m_offset = m_offset << 1;
+	}
+	return m_offset;
+}
+
+	static void
+mkfs_reread_partition_table(int fd)
+{
+	int i;
+
+	sync();
+	/* Users with slow external USB disks on a 320MHz ARM system (year 2011)
+	 * report that sleep is needed, otherwise BLKRRPART may fail with -EIO:
+	 */
+	i = ioctl_or_perror(fd, BLKRRPART, NULL,
+			"WARNING: rereading partition table "
+			"failed, kernel still uses old table");
+#if 0
+	if (dos_changed)
+		puts(
+				"\nWARNING: If you have created or modified any DOS 6.x\n"
+				"partitions, please see the fdisk manual page for additional\n"
+				"information");
+#endif
+
+}
+
+
 int mkfs_vfat_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
 int mkfs_vfat_main(int argc UNUSED_PARAM, char **argv)
 {
@@ -334,16 +373,16 @@ int mkfs_vfat_main(int argc UNUSED_PARAM, char **argv)
 			 */
 			sect_per_clust = 1;
 			if (volume_size_bytes >= 260*1024*1024) {
-				sect_per_clust = 8;
+				sect_per_clust = 128;
 				/* fight gcc: */
 				/* "error: integer overflow in expression" */
 				/* "error: right shift count >= width of type" */
 				if (sizeof(off_t) > 4) {
 					unsigned t = (volume_size_bytes >> 31 >> 1);
 					if (t >= 8/4)
-						sect_per_clust = 16;
+						sect_per_clust = 128;
 					if (t >= 16/4)
-						sect_per_clust = 32;
+						sect_per_clust = 128;
 				}
 			}
 		} else {
@@ -390,6 +429,10 @@ int mkfs_vfat_main(int argc UNUSED_PARAM, char **argv)
 	//
 	// "mkdosfs -v -F 32 image5k 5" is the minimum:
 	// 2 sectors for FATs and 2 data sectors
+	int default_reserved_sect =
+		mfks_vfat_get_sectors(((volume_size_sect / sect_per_clust * 4 * 2 + 1 ) / SECTOR_SIZE) + backup_boot_sector * 2);
+	int reserved_sect = default_reserved_sect;
+
 	if ((off_t)(volume_size_sect - reserved_sect) < 4)
 		bb_error_msg_and_die("the image is too small for FAT32");
 	sect_per_fat = 1;
@@ -437,6 +480,7 @@ int mkfs_vfat_main(int argc UNUSED_PARAM, char **argv)
 	}
  found_total_clust:
 
+	reserved_sect = default_reserved_sect - NUM_FATS * sect_per_fat;
 	//
 	// Print info
 	//
@@ -578,7 +622,7 @@ int mkfs_vfat_main(int argc UNUSED_PARAM, char **argv)
 		start_data_sector = (reserved_sect + NUM_FATS * sect_per_fat) * (bytes_per_sect / SECTOR_SIZE);
 		start_data_block = (start_data_sector + SECTORS_PER_BLOCK - 1) / SECTORS_PER_BLOCK;
 
-		bb_error_msg("searching for bad blocks");
+		bb_info_msg("searching for bad blocks ");
 		currently_testing = 0;
 		try = TEST_BUFFER_BLOCKS;
 		while (currently_testing < volume_size_blocks) {
@@ -616,13 +660,14 @@ int mkfs_vfat_main(int argc UNUSED_PARAM, char **argv)
 		}
 		free(blkbuf);
 		if (badblocks)
-			bb_error_msg("%d bad block(s)", badblocks);
+			bb_info_msg("%d bad block(s)", badblocks);
 	}
 #endif
 
 	// cleanup
 	if (ENABLE_FEATURE_CLEAN_UP) {
 		free(buf);
+		mkfs_reread_partition_table(dev);
 		close(dev);
 	}
 
-- 
2.7.4

